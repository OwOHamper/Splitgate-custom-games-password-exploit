import requests
import os
import glob
from base64 import b64decode, b64encode
import json

def get_token():
    for filename in glob.glob(os.path.join(os.getenv('LOCALAPPDATA'), R'PortalWars\Saved\SaveGames\*.sav')):
        with open(filename, 'r', errors="ignore") as savedata:
            q = savedata.read()
            token = q.split("LoginAuthToken")[1].split("\x00\x00\x00StrProperty\x00©\x01\x00\x00\x00\x00\x00\x00\x00¥\x01\x00\x00")[1].split("\x00\x14\x00\x00\x00PlaylistPreferences")[0]
            return token

def postRequest(url, token):
    r = requests.post(url, headers={"Authorization": token.encode().decode()})
    return r


def get_custom_game_list(token):
    return postRequest("https://api.splitgate.com/game-client/find-custom-games", token)

def decode_platform(string_to_encode):
    return json.loads(b64decode(string_to_encode).decode())


token = get_token()
games_list = get_custom_game_list(token)
if games_list.ok:
    while True:
        try:
            search_option = int(input("1: to find custom game by name.\n2: to find custom game by creator name. "))
        except ValueError:
            print('Avaible options are "1" and "2".')
            continue
        if int(search_option) == 1:
            break
        if int(search_option) == 2:
            break
        else:
            print('Avaible options are "1" and "2".')
    search = input("Enter name to find: ")
    for session in games_list.json()["sessions"]:
        if search_option == 1:
            if search.lower() in session["name"].lower():
                platform = decode_platform(session["createdBy"]["encodedCompositeUserId"])["platform"]
                print(f'name: {session["name"]}, creator: {session["createdBy"]["displayName"]}, platform: {platform}, region: {session["region"]}, ip: {session["ip"]}\npassword: {session["password"]}')
        elif search_option == 2:
            # print(session["createdBy"]["displayName"].lower())
            if search.lower() in session["createdBy"]["displayName"].lower():
                platform = decode_platform(session["createdBy"]["encodedCompositeUserId"])["platform"]
                print(
                    f'name: {session["name"]}, creator: {session["createdBy"]["displayName"]}, platform: {platform}, region: {session["region"]}, ip: {session["ip"]}\npassword: {session["password"]}')


else:
    print("Grabbing data was not successful\n" + games_list.text)